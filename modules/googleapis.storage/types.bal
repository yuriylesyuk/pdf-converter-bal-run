// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# A bucket/object IAM policy.
public type Policy record {
    # An association between a role, which comes with a set of permissions, and members who may assume that role.
    Policy_bindings[] bindings?;
    # HTTP 1.1  Entity tag for the policy.
    byte[] etag?;
    # The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.
    string kind?;
    # The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, and projects/_/buckets/bucket/objects/object for objects. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.
    string resourceId?;
    # The IAM policy format version.
    int:Signed32 version?;
};

# A subscription to receive Google PubSub notifications.
public type ServiceAccount record {
    # The ID of the notification.
    string email_address?;
    # The kind of item this is. For notifications, this is always storage#notification.
    string kind?;
};

# A list of hmacKeys.
public type HmacKeysMetadata record {
    # The list of items.
    HmacKeyMetadata[] items?;
    # The kind of item this is. For lists of hmacKeys, this is always storage#hmacKeysMetadata.
    string kind?;
    # The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken?;
};

# The bucket's versioning configuration.
public type Bucket_versioning record {
    # While set to true, versioning is fully enabled for this bucket.
    boolean enabled?;
};

public type ComposeRequest_sourceObjects record {
    # The generation of this object to use as the source.
    int generation?;
    # The source object's name. All source objects must reside in the same bucket.
    string name?;
    # Conditions that must be met for this operation to execute.
    ComposeRequest_objectPreconditions objectPreconditions?;
};

# An access-control list.
public type BucketAccessControls record {
    # The list of items.
    BucketAccessControl[] items?;
    # The kind of item this is. For lists of bucket access control entries, this is always storage#bucketAccessControls.
    string kind?;
};

# The owner of the object. This will always be the uploader of the object.
public type Object_owner record {
    # The entity, in the form user-userId.
    string entity?;
    # The ID for the entity.
    string entityId?;
};

# A list of buckets.
public type Buckets record {
    # The list of items.
    Bucket[] items?;
    # The kind of item this is. For lists of buckets, this is always storage#buckets.
    string kind?;
    # The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken?;
};

# A subscription to receive Google PubSub notifications.
public type Notification record {
    # An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
    record {|string...;|} custom_attributes?;
    # HTTP 1.1 Entity tag for this subscription notification.
    string etag?;
    # If present, only send notifications about listed event types. If empty, sent notifications for all event types.
    string[] event_types?;
    # The ID of the notification.
    string id?;
    # The kind of item this is. For notifications, this is always storage#notification.
    string kind?;
    # If present, only apply this notification configuration to object names that begin with this prefix.
    string object_name_prefix?;
    # The desired content of the Payload.
    string payload_format?;
    # The canonical URL of this notification.
    string selfLink?;
    # The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
    string topic?;
};

public type Bucket_cors record {
    # The value, in seconds, to return in the  Access-Control-Max-Age header used in preflight responses.
    int:Signed32 maxAgeSeconds?;
    # The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
    string[] method?;
    # The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
    string[] origin?;
    # The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
    string[] responseHeader?;
};

# The owner of the bucket. This is always the project team's owner group.
public type Bucket_owner record {
    # The entity, in the form project-owner-projectId.
    string entity?;
    # The ID for the entity.
    string entityId?;
};

# A storage.(buckets|objects).testIamPermissions response.
public type TestIamPermissionsResponse record {
    # The kind of item this is.
    string kind?;
    # The permissions held by the caller. Permissions are always of the format storage.resource.capability, where resource is one of buckets or objects. The supported permissions are as follows:  
    # - storage.buckets.delete — Delete bucket.  
    # - storage.buckets.get — Read bucket metadata.  
    # - storage.buckets.getIamPolicy — Read bucket IAM policy.  
    # - storage.buckets.create — Create bucket.  
    # - storage.buckets.list — List buckets.  
    # - storage.buckets.setIamPolicy — Update bucket IAM policy.  
    # - storage.buckets.update — Update bucket metadata.  
    # - storage.objects.delete — Delete object.  
    # - storage.objects.get — Read object data and metadata.  
    # - storage.objects.getIamPolicy — Read object IAM policy.  
    # - storage.objects.create — Create object.  
    # - storage.objects.list — List objects.  
    # - storage.objects.setIamPolicy — Update object IAM policy.  
    # - storage.objects.update — Update object metadata.
    string[] permissions?;
};

# An access-control list.
public type ObjectAccessControls record {
    # The list of items.
    ObjectAccessControl[] items?;
    # The kind of item this is. For lists of object access control entries, this is always storage#objectAccessControls.
    string kind?;
};

# An access-control entry.
public type ObjectAccessControl record {
    # The name of the bucket.
    string bucket?;
    # The domain associated with the entity, if any.
    string domain?;
    # The email address associated with the entity, if any.
    string email?;
    # The entity holding the permission, in one of the following forms: 
    # - user-userId 
    # - user-email 
    # - group-groupId 
    # - group-email 
    # - domain-domain 
    # - project-team-projectId 
    # - allUsers 
    # - allAuthenticatedUsers Examples: 
    # - The user liz@example.com would be user-liz@example.com. 
    # - The group example@googlegroups.com would be group-example@googlegroups.com. 
    # - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
    string entity?;
    # The ID for the entity, if any.
    string entityId?;
    # HTTP 1.1 Entity tag for the access-control entry.
    string etag?;
    # The content generation of the object, if applied to an object.
    int generation?;
    # The ID of the access-control entry.
    string id?;
    # The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
    string kind?;
    # The name of the object, if applied to an object.
    string 'object?;
    # The project team associated with the entity, if any.
    BucketAccessControl_projectTeam projectTeam?;
    # The access permission for the entity.
    string role?;
    # The link to this access-control entry.
    string selfLink?;
};

public type Bucket_lifecycle_rule record {
    # The action to take.
    Bucket_lifecycle_action action?;
    # The condition(s) under which the action will be taken.
    Bucket_lifecycle_condition condition?;
};

# JSON template to produce a JSON-style HMAC Key resource for Create responses.
public type HmacKey record {
    # The kind of item this is. For HMAC keys, this is always storage#hmacKey.
    string kind?;
    # JSON template to produce a JSON-style HMAC Key metadata resource.
    HmacKeyMetadata metadata?;
    # HMAC secret key material.
    string secret?;
};

# The project team associated with the entity, if any.
public type BucketAccessControl_projectTeam record {
    # The project number.
    string projectNumber?;
    # The team.
    string team?;
};

# The bucket's uniform bucket-level access configuration.
public type Bucket_iamConfiguration_uniformBucketLevelAccess record {
    # If set, access is controlled only by bucket-level or above IAM policies.
    boolean enabled?;
    # The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable.
    string lockedTime?;
};

# The bucket's billing configuration.
public type Bucket_billing record {
    # When set to true, Requester Pays is enabled for this bucket.
    boolean requesterPays?;
};

# The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
public type Bucket_logging record {
    # The destination bucket where the current bucket's logs should be placed.
    string logBucket?;
    # A prefix for log object names.
    string logObjectPrefix?;
};

# Conditions that must be met for this operation to execute.
public type ComposeRequest_objectPreconditions record {
    # Only perform the composition if the generation of the source object that would be used matches this value. If this value and a generation are both specified, they must be the same value or the call will fail.
    int ifGenerationMatch?;
};

# The condition(s) under which the action will be taken.
public type Bucket_lifecycle_condition record {
    # Age of an object (in days). This condition is satisfied when an object reaches the specified age.
    int:Signed32 age?;
    # A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
    string createdBefore?;
    # A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
    string customTimeBefore?;
    # Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
    int:Signed32 daysSinceCustomTime?;
    # Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
    int:Signed32 daysSinceNoncurrentTime?;
    # Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
    boolean isLive?;
    # A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
    string matchesPattern?;
    # List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.
    string[] matchesPrefix?;
    # List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.
    string[] matchesSuffix?;
    # Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
    string[] matchesStorageClass?;
    # A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
    string noncurrentTimeBefore?;
    # Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
    int:Signed32 numNewerVersions?;
};

# An access-control entry.
public type BucketAccessControl record {
    # The name of the bucket.
    string bucket?;
    # The domain associated with the entity, if any.
    string domain?;
    # The email address associated with the entity, if any.
    string email?;
    # The entity holding the permission, in one of the following forms: 
    # - user-userId 
    # - user-email 
    # - group-groupId 
    # - group-email 
    # - domain-domain 
    # - project-team-projectId 
    # - allUsers 
    # - allAuthenticatedUsers Examples: 
    # - The user liz@example.com would be user-liz@example.com. 
    # - The group example@googlegroups.com would be group-example@googlegroups.com. 
    # - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
    string entity?;
    # The ID for the entity, if any.
    string entityId?;
    # HTTP 1.1 Entity tag for the access-control entry.
    string etag?;
    # The ID of the access-control entry.
    string id?;
    # The kind of item this is. For bucket access control entries, this is always storage#bucketAccessControl.
    string kind?;
    # The project team associated with the entity, if any.
    BucketAccessControl_projectTeam projectTeam?;
    # The access permission for the entity.
    string role?;
    # The link to this access-control entry.
    string selfLink?;
};

# An notification channel used to watch for resource changes.
public type Channel record {
    # The address where notifications are delivered for this channel.
    string address?;
    # Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    int expiration?;
    # A UUID or similar unique string that identifies this channel.
    string id?;
    # Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel".
    string kind?;
    # Additional parameters controlling delivery channel behavior. Optional.
    record {|string...;|} params?;
    # A Boolean value to indicate whether payload is wanted. Optional.
    boolean payload?;
    # An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    string resourceId?;
    # A version-specific identifier for the watched resource.
    string resourceUri?;
    # An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    string token?;
    # The type of delivery mechanism used for this channel.
    string 'type?;
};

# The bucket's Autoclass configuration.
public type Bucket_autoclass record {
    # Whether or not Autoclass is enabled on this bucket
    boolean enabled?;
    # A date and time in RFC 3339 format representing the instant at which "enabled" was last toggled.
    string toggleTime?;
};

# The bucket's lifecycle configuration. See lifecycle management for more information.
public type Bucket_lifecycle record {
    # A lifecycle management rule, which is made of an action to take and the condition(s) under which the action will be taken.
    Bucket_lifecycle_rule[] rule?;
};

# Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
public type Object_customerEncryption record {
    # The encryption algorithm.
    string encryptionAlgorithm?;
    # SHA256 hash value of the encryption key.
    string keySha256?;
};

public type Policy_bindings record {
    # Represents an expression text. Example: title: "User account presence" description: "Determines whether the request has a user account" expression: "size(request.user) > 0"
    Expr condition?;
    # A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:  
    # - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.  
    # - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.  
    # - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.  
    # - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .  
    # - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.  
    # - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.  
    # - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project  
    # - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project  
    # - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project
    string[] members?;
    # The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
    # The new IAM roles are:  
    # - roles/storage.admin — Full control of Google Cloud Storage resources.  
    # - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.  
    # - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.  
    # - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:  
    # - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.  
    # - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.  
    # - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.  
    # - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.  
    # - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
    string role?;
};

# The action to take.
public type Bucket_lifecycle_action record {
    # Target storage class. Required iff the type of the action is SetStorageClass.
    string storageClass?;
    # Type of the action. Currently, only Delete, SetStorageClass, and AbortIncompleteMultipartUpload are supported.
    string 'type?;
};

# JSON template to produce a JSON-style HMAC Key metadata resource.
public type HmacKeyMetadata record {
    # The ID of the HMAC Key.
    string accessId?;
    # HTTP 1.1 Entity tag for the HMAC key.
    string etag?;
    # The ID of the HMAC key, including the Project ID and the Access ID.
    string id?;
    # The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata.
    string kind?;
    # Project ID owning the service account to which the key authenticates.
    string projectId?;
    # The link to this resource.
    string selfLink?;
    # The email address of the key's associated service account.
    string serviceAccountEmail?;
    # The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED.
    string state?;
    # The creation time of the HMAC key in RFC 3339 format.
    string timeCreated?;
    # The last modification time of the HMAC key metadata in RFC 3339 format.
    string updated?;
};

# Encryption configuration for a bucket.
public type Bucket_encryption record {
    # A Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
    string defaultKmsKeyName?;
};

# Represents an expression text. Example: title: "User account presence" description: "Determines whether the request has a user account" expression: "size(request.user) > 0"
public type Expr record {
    # An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    string description?;
    # Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
    string expression?;
    # An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
    string location?;
    # An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    string title?;
};

# A bucket.
public type Bucket record {
    # Access controls on the bucket.
    BucketAccessControl[] acl?;
    # The bucket's billing configuration.
    Bucket_billing billing?;
    # The bucket's Cross-Origin Resource Sharing (CORS) configuration.
    Bucket_cors[] cors?;
    # The bucket's custom placement configuration for Custom Dual Regions.
    Bucket_customPlacementConfig customPlacementConfig?;
    # The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
    boolean defaultEventBasedHold?;
    # Default access controls to apply to new objects when no ACL is provided.
    ObjectAccessControl[] defaultObjectAcl?;
    # Encryption configuration for a bucket.
    Bucket_encryption encryption?;
    # HTTP 1.1 Entity tag for the bucket.
    string etag?;
    # The bucket's IAM configuration.
    Bucket_iamConfiguration iamConfiguration?;
    # The ID of the bucket. For buckets, the id and name properties are the same.
    string id?;
    # The kind of item this is. For buckets, this is always storage#bucket.
    string kind?;
    # User-provided labels, in key/value pairs.
    record {|string...;|} labels?;
    # The bucket's lifecycle configuration. See lifecycle management for more information.
    Bucket_lifecycle lifecycle?;
    # The bucket's Autoclass configuration.
    Bucket_autoclass autoclass?;
    # The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
    string location?;
    # The type of the bucket location.
    string locationType?;
    # The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
    Bucket_logging logging?;
    # The metadata generation of this bucket.
    int metageneration?;
    # The name of the bucket.
    string name?;
    # The owner of the bucket. This is always the project team's owner group.
    Bucket_owner owner?;
    # The project number of the project the bucket belongs to.
    string projectNumber?;
    # The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
    Bucket_retentionPolicy retentionPolicy?;
    # The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
    string rpo?;
    # The URI of this bucket.
    string selfLink?;
    # The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
    string storageClass?;
    # The creation time of the bucket in RFC 3339 format.
    string timeCreated?;
    # The modification time of the bucket in RFC 3339 format.
    string updated?;
    # The bucket's versioning configuration.
    Bucket_versioning versioning?;
    # The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
    Bucket_website website?;
    # Reserved for future use.
    boolean satisfiesPZS?;
};

# The bucket's uniform bucket-level access configuration. The feature was formerly known as Bucket Policy Only. For backward compatibility, this field will be populated with identical information as the uniformBucketLevelAccess field. We recommend using the uniformBucketLevelAccess field to enable and disable the feature.
public type Bucket_iamConfiguration_bucketPolicyOnly record {
    # If set, access is controlled only by bucket-level or above IAM policies.
    boolean enabled?;
    # The deadline for changing iamConfiguration.bucketPolicyOnly.enabled from true to false in RFC 3339 format. iamConfiguration.bucketPolicyOnly.enabled may be changed from true to false until the locked time, after which the field is immutable.
    string lockedTime?;
};

# A list of objects.
public type Objects record {
    # The list of items.
    Object[] items?;
    # The kind of item this is. For lists of objects, this is always storage#objects.
    string kind?;
    # The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
    string nextPageToken?;
    # The list of prefixes of objects matching-but-not-listed up to and including the requested delimiter.
    string[] prefixes?;
};

# The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
public type Bucket_retentionPolicy record {
    # Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
    string effectiveTime?;
    # Once locked, an object retention policy cannot be modified.
    boolean isLocked?;
    # The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
    int retentionPeriod?;
};

# The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
public type Bucket_website record {
    # If the requested object path is missing, the service will ensure the path has a trailing '/', append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
    string mainPageSuffix?;
    # If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
    string notFoundPage?;
};

# An object.
public type Object record {
    # Access controls on the object.
    ObjectAccessControl[] acl?;
    # The name of the bucket containing this object.
    string bucket?;
    # Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
    string cacheControl?;
    # Number of underlying components that make up this object. Components are accumulated by compose operations.
    int:Signed32 componentCount?;
    # Content-Disposition of the object data.
    string contentDisposition?;
    # Content-Encoding of the object data.
    string contentEncoding?;
    # Content-Language of the object data.
    string contentLanguage?;
    # Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
    string contentType?;
    # CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
    string crc32c?;
    # A timestamp in RFC 3339 format specified by the user for an object.
    string customTime?;
    # Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
    Object_customerEncryption customerEncryption?;
    # HTTP 1.1 Entity tag for the object.
    string etag?;
    # Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
    boolean eventBasedHold?;
    # The content generation of this object. Used for object versioning.
    string generation?;
    # The ID of the object, including the bucket name, object name, and generation number.
    string id?;
    # The kind of item this is. For objects, this is always storage#object.
    string kind?;
    # Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
    string kmsKeyName?;
    # MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
    string md5Hash?;
    # Media download link.
    string mediaLink?;
    # User-provided metadata, in key/value pairs.
    record {|string...;|} metadata?;
    # The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
    string metageneration?;
    # The name of the object. Required if not specified by URL parameter.
    string name?;
    # The owner of the object. This will always be the uploader of the object.
    Object_owner owner?;
    # A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
    string retentionExpirationTime?;
    # The link to this object.
    string selfLink?;
    # Content-Length of the data in bytes.
    string size?;
    # Storage class of the object.
    string storageClass?;
    # Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
    boolean temporaryHold?;
    # The creation time of the object in RFC 3339 format.
    string timeCreated?;
    # The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
    string timeDeleted?;
    # The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
    string timeStorageClassUpdated?;
    # The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
    string updated?;
};

# The bucket's custom placement configuration for Custom Dual Regions.
public type Bucket_customPlacementConfig record {
    # The list of regional locations in which data is placed.
    string[] dataLocations?;
};

# A Compose request.
public type ComposeRequest record {
    # An object.
    Object destination?;
    # The kind of item this is.
    string kind?;
    # The list of source objects that will be concatenated into a single object.
    ComposeRequest_sourceObjects[] sourceObjects?;
};

# A list of notification subscriptions.
public type Notifications record {
    # The list of items.
    Notification[] items?;
    # The kind of item this is. For lists of notifications, this is always storage#notifications.
    string kind?;
};

# The bucket's IAM configuration.
public type Bucket_iamConfiguration record {
    # The bucket's uniform bucket-level access configuration. The feature was formerly known as Bucket Policy Only. For backward compatibility, this field will be populated with identical information as the uniformBucketLevelAccess field. We recommend using the uniformBucketLevelAccess field to enable and disable the feature.
    Bucket_iamConfiguration_bucketPolicyOnly bucketPolicyOnly?;
    # The bucket's uniform bucket-level access configuration.
    Bucket_iamConfiguration_uniformBucketLevelAccess uniformBucketLevelAccess?;
    # The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.
    string publicAccessPrevention?;
};

# A rewrite response.
public type RewriteResponse record {
    # true if the copy is finished; otherwise, false if the copy is in progress. This property is always present in the response.
    boolean done?;
    # The kind of item this is.
    string kind?;
    # The total size of the object being copied in bytes. This property is always present in the response.
    int objectSize?;
    # An object.
    Object 'resource?;
    # A token to use in subsequent requests to continue copying data. This token is present in the response only when there is more data to copy.
    string rewriteToken?;
    # The total bytes written so far, which can be used to provide a waiting user with a progress indicator. This property is always present in the response.
    int totalBytesRewritten?;
};
