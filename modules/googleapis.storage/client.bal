// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Stores and retrieves potentially large, immutable data objects.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://storage.googleapis.com/storage/v1") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Returns the ACL entry for the specified entity on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsGet(string bucket, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns BucketAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        BucketAccessControl response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates an ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsUpdate(string bucket, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns BucketAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        BucketAccessControl response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Permanently deletes the ACL entry for the specified entity on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsDelete(string bucket, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Patches an ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsPatch(string bucket, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns BucketAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        BucketAccessControl response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
    # Retrieves ACL entries on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsList(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns BucketAccessControls|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        BucketAccessControls response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a new ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketaccesscontrolsInsert(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns BucketAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/acl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        BucketAccessControl response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Returns metadata for the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # + projection - Set of properties to return. Defaults to noAcl.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsGet(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Bucket|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Bucket response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # + predefinedAcl - Apply a predefined set of access controls to this bucket.
    # + predefinedDefaultObjectAcl - Apply a predefined set of default object access controls to this bucket.
    # + projection - Set of properties to return. Defaults to full.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsUpdate(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "authenticatedRead"|"private"|"projectPrivate"|"publicRead"|"publicReadWrite"? predefinedAcl = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedDefaultObjectAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Bucket|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "predefinedAcl": predefinedAcl, "predefinedDefaultObjectAcl": predefinedDefaultObjectAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Bucket response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Permanently deletes an empty bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - If set, only deletes the bucket if its metageneration matches this value.
    # + ifMetagenerationNotMatch - If set, only deletes the bucket if its metageneration does not match this value.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsDelete(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # + predefinedAcl - Apply a predefined set of access controls to this bucket.
    # + predefinedDefaultObjectAcl - Apply a predefined set of default object access controls to this bucket.
    # + projection - Set of properties to return. Defaults to full.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsPatch(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "authenticatedRead"|"private"|"projectPrivate"|"publicRead"|"publicReadWrite"? predefinedAcl = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedDefaultObjectAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Bucket|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "predefinedAcl": predefinedAcl, "predefinedDefaultObjectAcl": predefinedDefaultObjectAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Bucket response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
    # Returns an IAM policy for the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + optionsRequestedPolicyVersion - The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsGetiampolicy(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), int? optionsRequestedPolicyVersion = (), string? userProject = ()) returns Policy|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/iam`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "optionsRequestedPolicyVersion": optionsRequestedPolicyVersion, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Policy response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates an IAM policy for the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsSetiampolicy(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns Policy|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/iam`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Policy response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Retrieves a list of buckets for a given project.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + project - A valid API project identifier.
    # + maxResults - Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
    # + pageToken - A previously-returned page token representing part of the larger set of results to view.
    # + prefix - Filter results to buckets whose names begin with this prefix.
    # + projection - Set of properties to return. Defaults to noAcl.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageBucketsList(string project, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), int maxResults = 1000, string? pageToken = (), string? prefix = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Buckets|error {
        string resourcePath = string `/b`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "project": project, "maxResults": maxResults, "pageToken": pageToken, "prefix": prefix, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Buckets response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a new bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + project - A valid API project identifier.
    # + predefinedAcl - Apply a predefined set of access controls to this bucket.
    # + predefinedDefaultObjectAcl - Apply a predefined set of default object access controls to this bucket.
    # + projection - Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageBucketsInsert(string project, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), "authenticatedRead"|"private"|"projectPrivate"|"publicRead"|"publicReadWrite"? predefinedAcl = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedDefaultObjectAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Bucket|error {
        string resourcePath = string `/b`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "project": project, "predefinedAcl": predefinedAcl, "predefinedDefaultObjectAcl": predefinedDefaultObjectAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Bucket response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Locks retention policy on a bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsLockretentionpolicy(string bucket, string ifMetagenerationMatch, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns Bucket|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/lockRetentionPolicy`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        Bucket response = check self.clientEp-> post(resourcePath, request);
        return response;
    }
    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + permissions - Permissions to test.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageBucketsTestiampermissions(string bucket, string[] permissions, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns TestIamPermissionsResponse|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/iam/testPermissions`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "permissions": permissions, "userProject": userProject};
        map<Encoding> queryParamEncoding = {"permissions": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        TestIamPermissionsResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Stop watching resources through this channel
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + return - Successful response 
    remote isolated function storageChannelsStop(http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = ()) returns http:Response|error {
        string resourcePath = string `/channels/stop`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        http:Response response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Returns the default object ACL entry for the specified entity on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsGet(string bucket, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ObjectAccessControl response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates a default object ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsUpdate(string bucket, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Permanently deletes the default object ACL entry for the specified entity on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsDelete(string bucket, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Patches a default object ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsPatch(string bucket, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
    # Retrieves default object ACL entries on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + ifMetagenerationMatch - If present, only return default ACL listing if the bucket's current metageneration matches this value.
    # + ifMetagenerationNotMatch - If present, only return default ACL listing if the bucket's current metageneration does not match the given value.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsList(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? userProject = ()) returns ObjectAccessControls|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ObjectAccessControls response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a new default object ACL entry on the specified bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageDefaultobjectaccesscontrolsInsert(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/defaultObjectAcl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # View a notification configuration.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - The parent bucket of the notification.
    # + notification - Notification ID
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageNotificationsGet(string bucket, string notification, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns Notification|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/notificationConfigs/${getEncodedUri(notification)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Notification response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Permanently deletes a notification subscription.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - The parent bucket of the notification.
    # + notification - ID of the notification to delete.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageNotificationsDelete(string bucket, string notification, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/notificationConfigs/${getEncodedUri(notification)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieves a list of notification subscriptions for a given bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a Google Cloud Storage bucket.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageNotificationsList(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns Notifications|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/notificationConfigs`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Notifications response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a notification subscription for a given bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - The parent bucket of the notification.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageNotificationsInsert(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns Notification|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/notificationConfigs`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Notification response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Returns the ACL entry for the specified entity on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsGet(string bucket, string 'object, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ObjectAccessControl response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates an ACL entry on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsUpdate(string bucket, string 'object, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Permanently deletes the ACL entry for the specified entity on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsDelete(string bucket, string 'object, string entity, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Patches an ACL entry on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + entity - The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsPatch(string bucket, string 'object, string entity, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl/${getEncodedUri(entity)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
    # Retrieves ACL entries on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsList(string bucket, string 'object, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns ObjectAccessControls|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ObjectAccessControls response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a new ACL entry on the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of a bucket.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectaccesscontrolsInsert(string bucket, string 'object, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns ObjectAccessControl|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/acl`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        ObjectAccessControl response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Concatenates a list of existing objects into a new object in the same bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + destinationBucket - Name of the bucket containing the source objects. The destination object is stored in this bucket.
    # + destinationObject - Name of the new object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + destinationPredefinedAcl - Apply a predefined set of access controls to the destination object.
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + kmsKeyName - Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsCompose(string destinationBucket, string destinationObject, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? destinationPredefinedAcl = (), string? ifGenerationMatch = (), string? ifMetagenerationMatch = (), string? kmsKeyName = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(destinationBucket)}/o/${getEncodedUri(destinationObject)}/compose`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "destinationPredefinedAcl": destinationPredefinedAcl, "ifGenerationMatch": ifGenerationMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "kmsKeyName": kmsKeyName, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Object response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Copies a source object to a destination object. Optionally overrides metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + sourceBucket - Name of the bucket in which to find the source object.
    # + sourceObject - Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + destinationBucket - Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + destinationObject - Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any.
    # + destinationKmsKeyName - Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
    # + destinationPredefinedAcl - Apply a predefined set of access controls to the destination object.
    # + ifGenerationMatch - Makes the operation conditional on whether the destination object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the destination object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the destination object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the destination object's current metageneration does not match the given value.
    # + ifSourceGenerationMatch - Makes the operation conditional on whether the source object's current generation matches the given value.
    # + ifSourceGenerationNotMatch - Makes the operation conditional on whether the source object's current generation does not match the given value.
    # + ifSourceMetagenerationMatch - Makes the operation conditional on whether the source object's current metageneration matches the given value.
    # + ifSourceMetagenerationNotMatch - Makes the operation conditional on whether the source object's current metageneration does not match the given value.
    # + projection - Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.
    # + sourceGeneration - If present, selects a specific revision of the source object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsCopy(string sourceBucket, string sourceObject, string destinationBucket, string destinationObject, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? destinationKmsKeyName = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? destinationPredefinedAcl = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? ifSourceGenerationMatch = (), string? ifSourceGenerationNotMatch = (), string? ifSourceMetagenerationMatch = (), string? ifSourceMetagenerationNotMatch = (), "full"|"noAcl"? projection = (), string? sourceGeneration = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(sourceBucket)}/o/${getEncodedUri(sourceObject)}/copyTo/b/${getEncodedUri(destinationBucket)}/o/${getEncodedUri(destinationObject)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "destinationKmsKeyName": destinationKmsKeyName, "destinationPredefinedAcl": destinationPredefinedAcl, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "ifSourceGenerationMatch": ifSourceGenerationMatch, "ifSourceGenerationNotMatch": ifSourceGenerationNotMatch, "ifSourceMetagenerationMatch": ifSourceMetagenerationMatch, "ifSourceMetagenerationNotMatch": ifSourceMetagenerationNotMatch, "projection": projection, "sourceGeneration": sourceGeneration, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Object response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieves an object or its metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the object's current metageneration does not match the given value.
    # + projection - Set of properties to return. Defaults to noAcl.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsGet(string bucket, string 'object, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Object response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates an object's metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the object's current metageneration does not match the given value.
    # + predefinedAcl - Apply a predefined set of access controls to this object.
    # + projection - Set of properties to return. Defaults to full.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsUpdate(string bucket, string 'object, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "predefinedAcl": predefinedAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Object response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Deletes an object and its metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, permanently deletes a specific revision of this object (as opposed to the latest version, the default).
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the object's current metageneration does not match the given value.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsDelete(string bucket, string 'object, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Patches an object's metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the object's current metageneration does not match the given value.
    # + predefinedAcl - Apply a predefined set of access controls to this object.
    # + projection - Set of properties to return. Defaults to full.
    # + userProject - The project to be billed for this request, for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsPatch(string bucket, string 'object, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "predefinedAcl": predefinedAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Object response = check self.clientEp->patch(resourcePath, request);
        return response;
    }
    # Returns an IAM policy for the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsGetiampolicy(string bucket, string 'object, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns Policy|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/iam`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Policy response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates an IAM policy for the specified object.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsSetiampolicy(string bucket, string 'object, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns Policy|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/iam`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "generation": generation, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Policy response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Retrieves a list of objects matching the criteria.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which to look for objects.
    # + delimiter - Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.
    # + endOffset - Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).
    # + includeTrailingDelimiter - If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes.
    # + maxResults - Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller.
    # + pageToken - A previously-returned page token representing part of the larger set of results to view.
    # + prefix - Filter results to objects whose names begin with this prefix.
    # + projection - Set of properties to return. Defaults to noAcl.
    # + startOffset - Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + versions - If true, lists all versions of an object as distinct results. The default is false. For more information, see Object Versioning.
    # + matchGlob - Filter results to objects and prefixes that match this glob pattern.
    # + return - Successful response 
    remote isolated function storageObjectsList(string bucket, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? delimiter = (), string? endOffset = (), boolean? includeTrailingDelimiter = (), int maxResults = 1000, string? pageToken = (), string? prefix = (), "full"|"noAcl"? projection = (), string? startOffset = (), string? userProject = (), boolean? versions = (), string? matchGlob = ()) returns Objects|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "delimiter": delimiter, "endOffset": endOffset, "includeTrailingDelimiter": includeTrailingDelimiter, "maxResults": maxResults, "pageToken": pageToken, "prefix": prefix, "projection": projection, "startOffset": startOffset, "userProject": userProject, "versions": versions, "matchGlob": matchGlob};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Objects response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Stores a new object and metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.
    # + contentEncoding - If set, sets the contentEncoding property of the final object to this value. Setting this parameter is equivalent to setting the contentEncoding metadata property. This can be useful when uploading an object with uploadType=media to indicate the encoding of the content being uploaded.
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the object's current metageneration does not match the given value.
    # + kmsKeyName - Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
    # + name - Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + predefinedAcl - Apply a predefined set of access controls to this object.
    # + projection - Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsInsert(string bucket, byte[] payload, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? contentEncoding = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? kmsKeyName = (), string? name = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? predefinedAcl = (), "full"|"noAcl"? projection = (), string? userProject = ()) returns Object|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "contentEncoding": contentEncoding, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "kmsKeyName": kmsKeyName, "name": name, "predefinedAcl": predefinedAcl, "projection": projection, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        Object response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Rewrites a source object to a destination object. Optionally overrides metadata.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + sourceBucket - Name of the bucket in which to find the source object.
    # + sourceObject - Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + destinationBucket - Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.
    # + destinationObject - Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + destinationKmsKeyName - Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
    # + destinationPredefinedAcl - Apply a predefined set of access controls to the destination object.
    # + ifGenerationMatch - Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
    # + ifGenerationNotMatch - Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
    # + ifMetagenerationMatch - Makes the operation conditional on whether the destination object's current metageneration matches the given value.
    # + ifMetagenerationNotMatch - Makes the operation conditional on whether the destination object's current metageneration does not match the given value.
    # + ifSourceGenerationMatch - Makes the operation conditional on whether the source object's current generation matches the given value.
    # + ifSourceGenerationNotMatch - Makes the operation conditional on whether the source object's current generation does not match the given value.
    # + ifSourceMetagenerationMatch - Makes the operation conditional on whether the source object's current metageneration matches the given value.
    # + ifSourceMetagenerationNotMatch - Makes the operation conditional on whether the source object's current metageneration does not match the given value.
    # + maxBytesRewrittenPerCall - The maximum number of bytes that will be rewritten per rewrite request. Most callers shouldn't need to specify this parameter - it is primarily in place to support testing. If specified the value must be an integral multiple of 1 MiB (1048576). Also, this only applies to requests where the source and destination span locations and/or storage classes. Finally, this value must not change across rewrite calls else you'll get an error that the rewriteToken is invalid.
    # + projection - Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.
    # + rewriteToken - Include this field (from the previous rewrite response) on each rewrite request after the first one, until the rewrite response 'done' flag is true. Calls that provide a rewriteToken can omit all other request fields, but if included those fields must match the values provided in the first rewrite request.
    # + sourceGeneration - If present, selects a specific revision of the source object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsRewrite(string sourceBucket, string sourceObject, string destinationBucket, string destinationObject, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? destinationKmsKeyName = (), "authenticatedRead"|"bucketOwnerFullControl"|"bucketOwnerRead"|"private"|"projectPrivate"|"publicRead"? destinationPredefinedAcl = (), string? ifGenerationMatch = (), string? ifGenerationNotMatch = (), string? ifMetagenerationMatch = (), string? ifMetagenerationNotMatch = (), string? ifSourceGenerationMatch = (), string? ifSourceGenerationNotMatch = (), string? ifSourceMetagenerationMatch = (), string? ifSourceMetagenerationNotMatch = (), string? maxBytesRewrittenPerCall = (), "full"|"noAcl"? projection = (), string? rewriteToken = (), string? sourceGeneration = (), string? userProject = ()) returns RewriteResponse|error {
        string resourcePath = string `/b/${getEncodedUri(sourceBucket)}/o/${getEncodedUri(sourceObject)}/rewriteTo/b/${getEncodedUri(destinationBucket)}/o/${getEncodedUri(destinationObject)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "destinationKmsKeyName": destinationKmsKeyName, "destinationPredefinedAcl": destinationPredefinedAcl, "ifGenerationMatch": ifGenerationMatch, "ifGenerationNotMatch": ifGenerationNotMatch, "ifMetagenerationMatch": ifMetagenerationMatch, "ifMetagenerationNotMatch": ifMetagenerationNotMatch, "ifSourceGenerationMatch": ifSourceGenerationMatch, "ifSourceGenerationNotMatch": ifSourceGenerationNotMatch, "ifSourceMetagenerationMatch": ifSourceMetagenerationMatch, "ifSourceMetagenerationNotMatch": ifSourceMetagenerationNotMatch, "maxBytesRewrittenPerCall": maxBytesRewrittenPerCall, "projection": projection, "rewriteToken": rewriteToken, "sourceGeneration": sourceGeneration, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        RewriteResponse response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Tests a set of permissions on the given object to see which, if any, are held by the caller.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which the object resides.
    # + 'object - Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).
    # + permissions - Permissions to test.
    # + generation - If present, selects a specific revision of this object (as opposed to the latest version, the default).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + return - Successful response 
    remote isolated function storageObjectsTestiampermissions(string bucket, string 'object, string[] permissions, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? generation = (), string? userProject = ()) returns TestIamPermissionsResponse|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/${getEncodedUri('object)}/iam/testPermissions`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "permissions": permissions, "generation": generation, "userProject": userProject};
        map<Encoding> queryParamEncoding = {"permissions": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        TestIamPermissionsResponse response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Watch for changes on all objects in a bucket.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + bucket - Name of the bucket in which to look for objects.
    # + delimiter - Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.
    # + endOffset - Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).
    # + includeTrailingDelimiter - If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes.
    # + maxResults - Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller.
    # + pageToken - A previously-returned page token representing part of the larger set of results to view.
    # + prefix - Filter results to objects whose names begin with this prefix.
    # + projection - Set of properties to return. Defaults to noAcl.
    # + startOffset - Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).
    # + userProject - The project to be billed for this request. Required for Requester Pays buckets.
    # + versions - If true, lists all versions of an object as distinct results. The default is false. For more information, see Object Versioning.
    # + return - Successful response 
    remote isolated function storageObjectsWatchall(string bucket, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? delimiter = (), string? endOffset = (), boolean? includeTrailingDelimiter = (), int maxResults = 1000, string? pageToken = (), string? prefix = (), "full"|"noAcl"? projection = (), string? startOffset = (), string? userProject = (), boolean? versions = ()) returns Channel|error {
        string resourcePath = string `/b/${getEncodedUri(bucket)}/o/watch`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "delimiter": delimiter, "endOffset": endOffset, "includeTrailingDelimiter": includeTrailingDelimiter, "maxResults": maxResults, "pageToken": pageToken, "prefix": prefix, "projection": projection, "startOffset": startOffset, "userProject": userProject, "versions": versions};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        Channel response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Retrieves a list of HMAC keys matching the criteria.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Name of the project in which to look for HMAC keys.
    # + maxResults - Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
    # + pageToken - A previously-returned page token representing part of the larger set of results to view.
    # + serviceAccountEmail - If present, only keys for the given service account are returned.
    # + showDeletedKeys - Whether or not to show keys in the DELETED state.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsHmackeysList(string projectId, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), int maxResults = 250, string? pageToken = (), string? serviceAccountEmail = (), boolean? showDeletedKeys = (), string? userProject = ()) returns HmacKeysMetadata|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/hmacKeys`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "maxResults": maxResults, "pageToken": pageToken, "serviceAccountEmail": serviceAccountEmail, "showDeletedKeys": showDeletedKeys, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        HmacKeysMetadata response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Creates a new HMAC key for the specified service account.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Project ID owning the service account.
    # + serviceAccountEmail - Email address of the service account.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsHmackeysCreate(string projectId, string serviceAccountEmail, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns HmacKey|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/hmacKeys`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "serviceAccountEmail": serviceAccountEmail, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Request request = new;
        HmacKey response = check self.clientEp-> post(resourcePath, request);
        return response;
    }
    # Retrieves an HMAC key's metadata
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Project ID owning the service account of the requested key.
    # + accessId - Name of the HMAC key.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsHmackeysGet(string projectId, string accessId, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns HmacKeyMetadata|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/hmacKeys/${getEncodedUri(accessId)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        HmacKeyMetadata response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Project ID owning the service account of the updated key.
    # + accessId - Name of the HMAC key being updated.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsHmackeysUpdate(string projectId, string accessId, http:Request request, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns HmacKeyMetadata|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/hmacKeys/${getEncodedUri(accessId)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        // TODO: Update the request as needed;
        HmacKeyMetadata response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Deletes an HMAC key.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Project ID owning the requested key
    # + accessId - Name of the HMAC key to be deleted.
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsHmackeysDelete(string projectId, string accessId, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns http:Response|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/hmacKeys/${getEncodedUri(accessId)}`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        http:Response response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Get the email address of this project's Google Cloud Storage service account.
    #
    # + alt - Data format for the response.
    # + fields - Selector specifying which fields to include in a partial response.
    # + 'key - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # + oauth_token - OAuth 2.0 token for the current user.
    # + prettyPrint - Returns response with indentations and line breaks.
    # + quotaUser - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # + userIp - Deprecated. Please use quotaUser instead.
    # + uploadType - Upload protocol for media (e.g. "media", "multipart", "resumable").
    # + projectId - Project ID
    # + userProject - The project to be billed for this request.
    # + return - Successful response 
    remote isolated function storageProjectsServiceaccountGet(string projectId, "json" alt = "json", string? fields = (), string? 'key = (), string? oauth_token = (), boolean prettyPrint = true, string? quotaUser = (), string? userIp = (), string? uploadType = (), string? userProject = ()) returns ServiceAccount|error {
        string resourcePath = string `/projects/${getEncodedUri(projectId)}/serviceAccount`;
        map<anydata> queryParam = {"alt": alt, "fields": fields, "key": 'key, "oauth_token": oauth_token, "prettyPrint": prettyPrint, "quotaUser": quotaUser, "userIp": userIp, "uploadType": uploadType, "userProject": userProject};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        ServiceAccount response = check self.clientEp->get(resourcePath);
        return response;
    }
}
